{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","children","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","console","log","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAIaA,G,YAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEP,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCLKC,G,MAAW,SAACR,GAAD,OACpB,sBAAKC,UAAU,YAAf,UACKD,EAAMS,SAASC,KAAK,SAACN,GAAD,OACjB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,OAEtBL,EAAMW,cCPFC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIb,UAAU,SACVc,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCgCHG,E,kDAnCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXT,SAAW,GACXU,YAAc,IALJ,E,gEASO,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEhB,SAAWe,S,+BAInC,IAAD,SAC4BE,KAAKR,MAA/BT,EADF,EACEA,SAAUU,EADZ,EACYA,YACZQ,EAAmBlB,EAASmB,QAAO,SAAAxB,GAAO,OAC9CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYY,wBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEY,YAAY,kBACZC,aAAc,SAAAkB,GAAC,OAAI,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,OAAQC,QAAQC,IAAI,EAAKlB,WAEnF,cAAC,EAAD,CAAUT,SAAUkB,W,GA7BVU,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.48e38470.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt='monster' \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}>\r\n        </img>\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react'\r\n\r\nimport {Card} from '../card/card.component'\r\n\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = (props) => (\r\n    <div className='card-list'>\r\n        {props.monsters.map( (monster) => (\r\n            <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n        {props.children}\r\n    </div>\r\n)\r\n","import React from 'react'\r\n\r\nimport './serach-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder= {placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)","import './App.css';\nimport React, { Component } from 'react'\nimport {CardList} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters : [],\n      searchField : ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters : users }))\n  }\n\n\n  render(){\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      )\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={e => this.setState({searchField: e.target.value}, console.log(this.state))}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n      \n    )\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}